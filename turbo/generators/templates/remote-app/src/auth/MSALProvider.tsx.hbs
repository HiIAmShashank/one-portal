// apps/remote-{{ appName }}/src/auth/MSALProvider.tsx
import { useEffect, useState, type ReactNode } from 'react';
import { MsalProvider } from '@azure/msal-react';
import { EventType as MsalEventType } from '@azure/msal-browser';
import { AuthLoadingSpinner } from '@one-portal/ui';
import { showAuthError } from '@one-portal/auth/utils';
import { msalInstance, getAuthConfig } from './msalInstance';
import { subscribeToAuthEvents } from '@one-portal/auth/events';

interface {{ properCase appName }}MSALProviderProps {
  children: ReactNode;
}

/**
 * {{ displayName }} MSAL Provider
 * 
 * Features:
 * - Attempts silent SSO on mount
 * - Listens for auth events from Shell
 * - Redirects to Shell sign-in if authentication fails
 * - Displays loading spinner during initialization
 * 
 * Requirements: FR-005 (Authentication), US3 (SSO), US7 (Error Handling)
 */
export function {{ properCase appName }}MSALProvider({ children }: {{ properCase appName }}MSALProviderProps) {
  const [isInitialized, setIsInitialized] = useState(false);
  const [srAnnouncement, setSrAnnouncement] = useState('');

  const announceToScreenReader = (message: string) => {
    setSrAnnouncement(message);
    setTimeout(() => setSrAnnouncement(''), 3000);
  };

  useEffect(() => {
    let isMounted = true;

    async function initializeAuth() {
      try {
        await msalInstance.initialize();
        await msalInstance.handleRedirectPromise();
        if (!isMounted) return;

        const accounts = msalInstance.getAllAccounts();
        
        if (accounts.length > 0) {
          msalInstance.setActiveAccount(accounts[0]);
          
          try {
            // Try silent token acquisition first
            await msalInstance.acquireTokenSilent({
              scopes: getAuthConfig().scopes,
              account: accounts[0],
            });
            setIsInitialized(true);
            announceToScreenReader('{{ displayName }} authenticated successfully');
          } catch (error: any) {
            // Try SSO with login hint
            try {
              const ssoResult = await msalInstance.ssoSilent({
                scopes: getAuthConfig().scopes,
                loginHint: accounts[0].username,
              });
              msalInstance.setActiveAccount(ssoResult.account);
              setIsInitialized(true);
              announceToScreenReader('{{ displayName }} authenticated via SSO');
            } catch (ssoError: any) {
              console.error('[{{ displayName }}] SSO failed:', ssoError);
              showAuthError(ssoError, undefined, { announceToScreenReader });
              
              // Redirect to Shell sign-in with returnUrl
              const currentPath = window.location.pathname + window.location.search;
              window.location.href = `/sign-in?returnUrl=${encodeURIComponent(currentPath)}`;
            }
          }
        } else {
          // No accounts - redirect to Shell sign-in
          const currentPath = window.location.pathname + window.location.search;
          window.location.href = `/sign-in?returnUrl=${encodeURIComponent(currentPath)}`;
        }
      } catch (error) {
        console.error('[{{ displayName }}] Auth initialization failed:', error);
        showAuthError(error, undefined, { announceToScreenReader });
        
        // Redirect to Shell sign-in
        const currentPath = window.location.pathname + window.location.search;
        window.location.href = `/sign-in?returnUrl=${encodeURIComponent(currentPath)}`;
      }
    }

    initializeAuth();

    return () => {
      isMounted = false;
    };
  }, []);

  // Listen for Shell auth events
  useEffect(() => {
    const unsubscribe = subscribeToAuthEvents(async (event) => {
      if (event.type === 'auth:signed-in') {
        console.log('[{{ displayName }}] Received auth:signed-in event from Shell');
        
        try {
          const ssoResult = await msalInstance.ssoSilent({
            scopes: getAuthConfig().scopes,
            loginHint: event.payload?.loginHint,
          });
          
          msalInstance.setActiveAccount(ssoResult.account);
          setIsInitialized(true);
          announceToScreenReader('{{ displayName }} signed in via SSO');
          console.log('[{{ displayName }}] SSO successful');
        } catch (error) {
          console.error('[{{ displayName }}] SSO failed after Shell sign-in:', error);
          showAuthError(error, undefined, { announceToScreenReader });
        }
      } else if (event.type === 'auth:signed-out') {
        console.log('[{{ displayName }}] Received auth:signed-out event from Shell');
        await msalInstance.clearCache();
        msalInstance.setActiveAccount(null);
        setIsInitialized(false);
        announceToScreenReader('{{ displayName }} signed out');
      }
    });

    return () => {
      unsubscribe();
    };
  }, []);

  // Listen for MSAL events
  useEffect(() => {
    const callbackId = msalInstance.addEventCallback((event) => {
      if (event.eventType === MsalEventType.LOGIN_SUCCESS && event.payload) {
        const payload = event.payload as any;
        msalInstance.setActiveAccount(payload.account);
        setIsInitialized(true);
        announceToScreenReader('{{ displayName }} sign-in successful');
      }
    });

    return () => {
      if (callbackId) {
        msalInstance.removeEventCallback(callbackId);
      }
    };
  }, []);

  if (!isInitialized) {
    return (
      <>
        <AuthLoadingSpinner
          title="Initializing {{ displayName }}..."
          description="Please wait while we set up your session."
        />
        {/* Screen reader announcements */}
        <div role="status" aria-live="polite" aria-atomic="true" className="sr-only">
          {srAnnouncement}
        </div>
      </>
    );
  }

  return (
    <MsalProvider instance={msalInstance}>
      {children}
      {/* Screen reader announcements */}
      <div role="status" aria-live="polite" aria-atomic="true" className="sr-only">
        {srAnnouncement}
      </div>
    </MsalProvider>
  );
}
